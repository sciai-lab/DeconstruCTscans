# reasons you might want to use `environment.yaml` instead of `requirements.txt`:
# - pip installs packages in a loop, without ensuring dependencies across all packages
#   are fulfilled simultaneously, but conda achieves proper dependency control across
#   all packages
# - conda allows for installing packages without requiring certain compilers or
#   libraries to be available in the system, since it installs precompiled binaries

name: deconstruct

channels:
  - pytorch
  - nvidia
  - pyg
  - ilastik-forge
  - conda-forge

# it is strongly recommended to specify versions of packages installed through conda
# to avoid situation when version-unspecified packages install their latest major
# versions which can sometimes break things

# current approach below keeps the dependencies in the same major versions across all
# users, but allows for different minor and patch versions of packages where backwards
# compatibility is usually guaranteed

dependencies:
  - python=3.10
  - jupyter
  - jupyterlab
  - tqdm
  - tensorboard
  - python-elf
  - h5py
  - z5py
  - numpy
  - numba
  - trimesh
  - scikit-learn=1.3.2
  - scikit-image=0.22
  - vtk
  - networkx
  - matplotlib
  - marching_cubes
  - pytorch=2.*
  - lightning=2.*
  - torchvision=0.*
  - pytorch-cuda=12.1
  - pytorch-scatter
  - pytorch-cluster
  - firelight
  - pytorch-3dunet

  - pip>=23
  - pip:
      - open3d
      - torch-geometric==2.4.0
      - scipy==1.10 # this causes reinstall to fix problem with torch and open3d
      - fancy-utils[plotting]
      - POT
      - faiss-gpu
      - memory-profiler